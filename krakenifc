#!/usr/bin/ruby

require 'net/http'
require 'json'
require 'csv'
VALUE=0
VOLUME=1
TIME=2
	
def getMarketData(pair, period, from, to=0)
	if (to <= 0) #get current time
		src=Net::HTTP.get(URI("https://api.kraken.com/0/public/Time"))
		spars=JSON.parse(src)['result']
		to=spars['unixtime'].to_i-60
	end

	from*=1e6.to_i
	to*=1e6.to_i
	period*=1e6.to_i

	curtime=-1
	curvalue=0.0
	curvolume=0.0
	nvalue=0

	out=Array.new
	last=from*1e3.to_i

	loop do
		src=Net::HTTP.get(URI("https://api.kraken.com/0/public/Trades?pair=#{pair}&since=#{last}"))
		spars=JSON.parse(src)['result']
		mkta=spars.values[0]
		STDERR.puts "#{((mkta.first[TIME]*1e6-from)/(to-from)*100).to_i}% processed" if mkta.first != nil

		mkta.each do |m|
			value=m[VALUE].to_f
			volume=m[VOLUME].to_f
			time=(m[TIME].to_f * 1e6).to_i
			nvalue+=1
			
			curtime=time if curtime<0
			curvalue+=value
			curvolume+=volume

			if (time >= to)
				out << { 'time' => curtime, 'value' => curvalue/nvalue, 'volume' => curvolume/nvalue }
				STDERR.puts "Done"
				return out
			elsif (time >= curtime + period) 
				out << { 'time' => curtime, 'value' => curvalue/nvalue, 'volume' => curvolume/nvalue }
				curtime+=period
				curvalue=0.0
				curvolume=0.0
				nvalue=0
			end

		end

		last=spars['last'].to_i;
	end

end


if ARGV.count < 3
	puts "Usage"
	puts "krakenifc pair period from to"
	puts "to is optional"
	exit -1
end

pair=ARGV[0]
period=ARGV[1].to_i
from=ARGV[2].to_i
to=(ARGV.count > 3 ) ? ARGV[3].to_i : 0

x=getMarketData(pair,period,from,to)
s=CSV.generate do |csv|
	x.each do |e|
		csv << e.values
	end
end

puts s

